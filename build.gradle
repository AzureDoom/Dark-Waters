buildscript {
    repositories {
    	maven { url  = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.0"
    }
}

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.modrinth.minotaur.dependencies.ModDependency

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url "https://cfa2.cursemaven.com" }
    maven { url 'https://dl.cloudsmith.io/public/azuredoom-mods/azurelib/maven/' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.terraformersmc.com" }
    maven { url "https://maven.parchmentmc.org" }
}

configurations {
    shade
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.19.3:2022.12.18@zip")
    }
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricVersion}"
  	modImplementation 'mod.azure.azurelib:azurelib-fabric-1.19.3:1.0.3'
	modImplementation "maven.modrinth:midnightlib:1.1.0-fabric"
    shade group: 'maven.modrinth', name: 'midnightlib', version: '1.1.0-fabric'
	modImplementation ("com.terraformersmc:modmenu:5.0.2")
	modImplementation "curse.maven:SBL-661293:4277537-sources-4277538"
}

shadowJar {
    configurations = [project.configurations.shade]
    from sourceSets.main.output
    duplicatesStrategy = 'exclude'
    relocate 'eu.midnightdust', 'mod.azure.darkwaters.shadowed.midnightlib'
    classifier 'dev'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

loom {
	accessWidenerPath = file("src/main/resources/darkwaters.accesswidener")
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

artifacts {
    archives shadowJar
}

remapJar {
    dependsOn(shadowJar)
    inputFile = shadowJar.archiveFile
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {

    	def curseProp = new Properties()
    	File secretPropsFile = file("key.properties")
    	curseProp.load(secretPropsFile.newInputStream())

    	project {
        	apiKey = curseProp.getProperty('curseKey')
        	id = "${curse_id}"
        	releaseType = "${curse_release}"
        	changelogType = 'text'
        	changelog = file('CHANGELOG.txt')
			addGameVersion("1.19.3")
			addGameVersion("Fabric")
			addGameVersion("Java 17")

        	relations {
            	requiredDependency 'fabric-api'  
            	requiredDependency 'azurelib' 
            	requiredDependency 'smartbrainlib' 
        	}
        	mainArtifact(remapJar)

        	afterEvaluate {
            	uploadTask.dependsOn("remapJar")
        	}
    	}
    	options {
    		//debug = true
        	forgeGradleIntegration = false
    	}
    }
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
	repositories {
	}
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = 'pe7gyI14' 
		versionNumber = project.mod_version 
		versionName = 'Fabric/Quilt 1.19.3'
		uploadFile = remapJar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.19.3']
		loaders = ['fabric','quilt']
		dependencies { 
        	required.project "azurelib"
        	required.project "smartbrainlib"
        	required.project "fabric-api"
            optional.project "modmenu"
            optional.project "roughly-enough-items"
   		}
	}
}
