buildscript {
    repositories {
    	maven { url  = 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.modrinth.minotaur.dependencies.ModDependency

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.modName
version = project.modVersion
group = project.mavenGroup

repositories {
	maven { url "https://cfa2.cursemaven.com" }
    maven { url 'https://libs.azuredoom.com:4443/mods' }
    maven { url 'https://dl.cloudsmith.io/public/tslat/sbl/maven/' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.terraformersmc.com" }
    maven { url "https://maven.parchmentmc.org" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricVersion}"
  	modImplementation "mod.azure.azurelib:azurelib-fabric-${project.minecraftVersion}:${project.azurelibVersion}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenuVersion}"
	modImplementation "net.tslat.smartbrainlib:SmartBrainLib-fabric-${project.minecraftVersion}:${project.sblVersion}"
	modImplementation "net.tslat.smartbrainlib:SmartBrainLib-common-${project.minecraftVersion}:${project.sblVersion}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

loom {
	accessWidenerPath = file("src/main/resources/darkwaters.accesswidener")
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {

    	def curseProp = new Properties()
    	File secretPropsFile = file("key.properties")
    	curseProp.load(secretPropsFile.newInputStream())

    	project {
        	apiKey = curseProp.getProperty('curseKey')
        	id = "${curseID}"
        	releaseType = "${releaseStatus}"
        	changelogType = 'text'
        	changelog = file('CHANGELOG.txt')
			addGameVersion("${project.minecraftVersion}")
			addGameVersion("Fabric")
			addGameVersion("Java 17")

        	relations {
            	requiredDependency 'fabric-api'  
            	requiredDependency 'azurelib' 
            	requiredDependency 'smartbrainlib' 
        	}
        	mainArtifact(remapJar)

        	afterEvaluate {
            	uploadTask.dependsOn("remapJar")
        	}
    	}
    	options {
    		//debug = true
        	forgeGradleIntegration = false
    	}
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = ${modrinthID}
		versionNumber = project.modVersion 
		uploadFile = remapJar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = [${project.minecraftVersion}]
		loaders = ['fabric','quilt']
		dependencies { 
        	required.project "azurelib"
        	required.project "smartbrainlib"
        	required.project "fabric-api"
            optional.project "modmenu"
   		}
	}
}
